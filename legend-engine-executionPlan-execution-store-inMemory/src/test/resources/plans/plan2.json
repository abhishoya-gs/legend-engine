{
  "_type": "simple",
  "authDependent": false,
  "globalImplementationSupport": {
    "_type": "java",
    "classes": [
      {
        "name": "Firm",
        "package": "_pure.app.demo",
        "source": "package _pure.app.demo;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Firm extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    long getId();\n    String getLegalName();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "name": "_Firms",
        "package": "_pure.app.demo",
        "source": "package _pure.app.demo;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface _Firms extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    Firm get_firm();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "name": "JsonDataRecord",
        "package": "_pure.app.meta.pure.mapping.modelToModel",
        "source": "package _pure.app.meta.pure.mapping.modelToModel;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface JsonDataRecord\n{\n    long getNumber();\n    String getRecord();\n}"
      },
      {
        "name": "Execute",
        "package": "_pure.plan.root.n2.n1",
        "source": "package _pure.plan.root.n2.n1;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute\n{\n    public static long execute(IExecutionNodeContext context)\n    {\n        try\n        {\n            long id = context.getResult(\"id\", Long.class);\n            return Arrays.asList(id, 1L).stream().reduce(0L, Library::integerPlus).longValue();\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(\"Failed in node: root.n2.n1\", e);\n        }\n    }\n}"
      },
      {
        "name": "Serialize",
        "package": "_pure.plan.root.n3",
        "source": "package _pure.plan.root.n3;\n\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\n{\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\n                                          IExecutionNodeContext context)\n    {\n        return new Serializer(writer, context);\n    }\n}"
      },
      {
        "name": "Serializer",
        "package": "_pure.plan.root.n3",
        "source": "package _pure.plan.root.n3;\n\nimport _pure.app.demo.Firm;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Serializer implements IGraphSerializer<Firm>\n{\n    private ISerializationWriter writer;\n    private IExecutionNodeContext context;\n\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\n    {\n        this.writer = writer;\n        this.context = context;\n    }\n\n    public void serialize(Firm value)\n    {\n        if (value instanceof IReferencedObject)\n        {\n            this.writer\n                .startObject(\"demo::Firm\",\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\n        }\n        else\n        {\n            this.writer.startObject(\"demo::Firm\");\n        }\n        this.writer.writeIntegerProperty(\"id\", value.getId());\n        this.writer.writeStringProperty(\"legalName\", value.getLegalName());\n        this.writer.endObject();\n    }\n}"
      },
      {
        "name": "Execute",
        "package": "_pure.plan.root.n3.n1.localGraph",
        "source": "package _pure.plan.root.n3.n1.localGraph;\n\nimport _pure.app.demo.Firm;\nimport _pure.app.demo._Firms;\nimport java.util.HashMap;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchExecutionNodeSpecifics;\n\npublic class Execute implements IInMemoryRootGraphFetchExecutionNodeSpecifics\n{\n    public HashMap<Object, Object> sharedObject = new HashMap();\n\n    public Object transform(Object input)\n    {\n        _Firms src = (_Firms) input;\n        GraphFetch_Node0_Firm_Impl result = new GraphFetch_Node0_Firm_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"demo_Firm\");\n        try\n        {\n            result.setId(src.get_firm().getId());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'id' on Target class 'demo::Firm [demo_Firm]' on Mapping 'demo::M2MMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setLegalName(src.get_firm().getLegalName());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'legalName' on Target class 'demo::Firm [demo_Firm]' on Mapping 'demo::M2MMapping'.\\n\" + e.getMessage());\n        }\n        return new IGraphInstance<GraphFetch_Node0_Firm_Impl>()\n        {\n            public GraphFetch_Node0_Firm_Impl getValue()\n            {\n                return result;\n            }\n            public long instanceSize()\n            {\n                return result.getInstanceSize$();\n            }\n        };\n    }\n}"
      },
      {
        "name": "GraphFetch_Node0_Firm_Impl",
        "package": "_pure.plan.root.n3.n1.localGraph",
        "source": "package _pure.plan.root.n3.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node0_Firm_Impl implements _pure.app.demo.Firm, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.demo.Firm>, java.io.Serializable\n{\n    private long id;\n    private String legalName;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1700561824L;\n\n    public long getId()\n    {\n        return this.id;\n    }\n\n    public void setId(long id)\n    {\n        this.id = id;\n    }\n\n    public void addId(long object)\n    {\n        if ((Object) new Long(this.id) != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'id' of multiplicity with bound 1\");\n        }\n        this.id = object;\n    }\n\n    public String getLegalName()\n    {\n        return this.legalName;\n    }\n\n    public void setLegalName(String legalName)\n    {\n        this.legalName = legalName;\n    }\n\n    public void addLegalName(String object)\n    {\n        if ((Object) this.legalName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'legalName' of multiplicity with bound 1\");\n        }\n        this.legalName = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.demo.Firm withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm> toChecked(Object source,\n                                                                                                                boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.demo.Firm getValue() { return GraphFetch_Node0_Firm_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 116L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_Firm_Impl.getClassSize$();\n        if (this.legalName != null)\n        {\n            size = size + this.legalName.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "name": "Execute",
        "package": "_pure.plan.root.n3.n1.localGraph.n1",
        "source": "package _pure.plan.root.n3.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IStoreStreamReadingExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IStoreStreamReadingExecutionNodeSpecifics\n{\n    public IStoreStreamReader streamReader(IStoreStreamReadingExecutionNodeContext context)\n    {\n        try\n        {\n            return new _pure.plan.root.n3.n1.localGraph.n1.JsonDataReader_demo__Firms(context.createUrl(\"data:application/json,[{\\\"_firm\\\": {\\\"id\\\":1,\\\"legalName\\\":\\\"Finos\\\"}},{\\\"_firm\\\": {\\\"id\\\":2,\\\"legalName\\\":\\\"Legend\\\"}}]\")\n                                                                                             .openStream());\n        }\n        catch (java.io.IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
      },
      {
        "name": "JsonDataReader_demo__Firms",
        "package": "_pure.plan.root.n3.n1.localGraph.n1",
        "source": "package _pure.plan.root.n3.n1.localGraph.n1;\n\nimport _pure.app.demo.Firm;\nimport _pure.app.demo._Firms;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.filter.FilteringParserDelegate;\nimport com.fasterxml.jackson.core.filter.JsonPointerBasedFilter;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport java.io.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class JsonDataReader_demo__Firms implements org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader\n{\n    private boolean finishedReading = false;\n    private Stack<Object> stack = new Stack<Object>();\n    private JsonParser parser;\n    private ObjectMapper objectMapper;\n    private boolean inArray = false;\n    private long recordCount = 0;\n    private InputStream in;\n\n    JsonDataReader_demo__Firms(InputStream in)\n    {\n        this.in = in;\n    }\n\n    public void initReading()\n    {\n        try\n        {\n            this.parser = new JsonFactory().createParser(this.in);\n            this.objectMapper = new ObjectMapper();\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private boolean readMethodExists(String name)\n    {\n        Method[] methods = this.getClass().getDeclaredMethods();\n        for (int i = 0; i < methods.length; i++) {\n           if (methods[i].getName().equals(name)) return true;\n        };\n        return false;\n    }\n\n    private Object readMethodInvoke(String name, JsonNode node)\n    {\n        Method m = null;\n        try{\n           m = this.getClass().getMethod(name, JsonNode.class);\n        }\n        catch (NoSuchMethodException e){throw new RuntimeException(e.getMessage());}\n        try{\n           return m.invoke(this, node);\n        }\n        catch (IllegalAccessException e){throw new RuntimeException(e.getMessage());}catch (InvocationTargetException e){throw new RuntimeException(e.getMessage());}\n    }\n\n    public void destroyReading()\n    {\n        if (this.parser.isClosed())\n        {\n           return;\n        }\n        try\n        {\n            this.parser.close();\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean isFinished()\n    {\n        nextToken();\n        if (!this.finishedReading && getCurrentToken() == JsonToken.START_ARRAY && !inArray)\n        {\n            nextToken();\n            inArray = true;\n        }\n        if (!this.finishedReading && getCurrentToken() == JsonToken.END_ARRAY && inArray)\n        {\n            nextToken();\n            inArray = false;\n            this.finishedReading = true;\n        }\n        this.finishedReading |= getCurrentToken() == null;\n        return this.finishedReading ;\n    }\n\n    public void nextToken()\n    {\n            try\n            {\n                this.parser.nextToken();\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n    }\n\n    public IChecked<_Firms> read_demo__Firms(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"demo::_Firms\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<_pure.app.demo.Firm> __firm = new java.util.ArrayList<>();\n\n        this.stack.push(new _pure.plan.root.n3.n1.localGraph.n1.demo__Firms_Impl());\n\n        if (node.path(\"_firm\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm>> checked = acceptMany(node.path(\"_firm\"), this::read_demo_Firm,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"_firm\"+\": \"+m,\"demo::_Firms\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"_firm\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"_firm\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        __firm = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (__firm.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for _firm: expected [1] found [\" + __firm.size() + \"]\", \"demo::_Firms\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo._Firms>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.demo._Firms getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n3.n1.localGraph.n1.demo__Firms_Impl) this.stack.peek())._firm = __firm.get(0);\n            _pure.app.demo._Firms value = (_pure.app.demo._Firms) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo._Firms>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.demo._Firms getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Firm> read_demo_Firm(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"demo::Firm\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<Long> _id = new java.util.ArrayList<>();\n        java.util.List<String> _legalName = new java.util.ArrayList<>();\n\n        this.stack.push(new _pure.plan.root.n3.n1.localGraph.n1.demo_Firm_Impl());\n\n        if (node.path(\"id\").getNodeType() != JsonNodeType.MISSING){\n        _id = acceptMany(node.path(\"id\"), this::acceptInteger,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"id\"+\": \"+m,\"demo::Firm\")));\n        }\n        if (node.path(\"legalName\").getNodeType() != JsonNodeType.MISSING){\n        _legalName = acceptMany(node.path(\"legalName\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"legalName\"+\": \"+m,\"demo::Firm\")));\n        }\n        if (_id.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for id: expected [1] found [\" + _id.size() + \"]\", \"demo::Firm\"));\n        }\n        if (_legalName.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for legalName: expected [1] found [\" + _legalName.size() + \"]\", \"demo::Firm\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.demo.Firm getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n3.n1.localGraph.n1.demo_Firm_Impl) this.stack.peek()).id = _id.get(0);\n        ((_pure.plan.root.n3.n1.localGraph.n1.demo_Firm_Impl) this.stack.peek()).legalName = _legalName.get(0);\n            _pure.app.demo.Firm value = (_pure.app.demo.Firm) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.demo.Firm getValue() { return value; }\n        };\n        }\n    }\n\n    private String acceptString(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE String\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.textValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private boolean acceptBoolean(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Boolean\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"BOOLEAN\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.booleanValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private long acceptInteger(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Integer\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private double acceptFloat(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Float\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.doubleValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private BigDecimal acceptDecimal(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Decimal\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? new BigDecimal(node.textValue())\n                       : node.decimalValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private Number acceptNumber(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Number\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? (Number) new BigDecimal(node.textValue())\n                       : node.isDouble() == true\n                             ? node.doubleValue()\n                             : node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptStrictDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE StrictDate\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptDateTime(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE DateTime\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Date\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n            .parsePureDate(node.textValue());\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private <T> List<T> acceptMany(JsonNode node,\n                                   Function<JsonNode, T> acceptor,\n                                   Consumer<String> defectRecorder)\n    {\n        List<T> result = new ArrayList<T>();\n        if (node.isNull())\n        {\n            return result;\n        }\n        if (node.isArray())\n        {\n            for (JsonNode n: node)\n            {\n                try\n                {\n                    result.add(acceptor.apply(n));\n                }\n                catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n                {\n                    defectRecorder.accept(ex.getMessage());\n                }\n            }\n        }\n        else\n        {\n            try\n            {\n                result.add(acceptor.apply(node));\n            }\n            catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n            {\n                defectRecorder.accept(ex.getMessage());\n            }\n        }\n        return result;\n    }\n\n    private JsonToken getCurrentToken()\n    {\n        return parser.getCurrentToken();\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode)\n    {\n        check(expectedNode, currentNode, \"Failed to parse JSON, expected '\" + expectedNode + \"', Found \" + currentNode);\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode, String errorMessage)\n    {\n        check(Collections.singletonList(expectedNode), currentNode, errorMessage);\n    }\n\n    private void check(List<JsonNodeType> expectedNodes,\n                       JsonNodeType currentNode,\n                       String errorMessage)\n    {\n        if (!expectedNodes.contains(currentNode))\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(errorMessage);\n        }\n    }\n\n    public Collection<IChecked<_Firms>> readCheckedObjects()\n    {\n        try\n        {\n            this.recordCount++;\n            JsonNode node = this.objectMapper.readValue(this.parser, JsonNode.class);\n            IChecked<_Firms> object = this.read_demo__Firms(node);\n            long recordNumber = this.recordCount;\n            String json = node.toString();\n            _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord source = new _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord()\n            {\n                public long getNumber()\n                {\n                    return recordNumber;\n                }\n                public String getRecord()\n                {\n                    return json;\n                }\n            };\n            return Collections.singleton(new IChecked<_Firms>()\n            {\n                public List<IDefect> getDefects()\n                {\n                    return object.getDefects();\n                }\n                public Object getSource()\n                {\n                    return source;\n                }\n                public _Firms getValue()\n                {\n                    return object.getValue();\n                }\n            });\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
      },
      {
        "name": "demo_Firm_Impl",
        "package": "_pure.plan.root.n3.n1.localGraph.n1",
        "source": "package _pure.plan.root.n3.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\n\nclass demo_Firm_Impl implements _pure.app.demo.Firm, IReferencedObject, Constrained<_pure.app.demo.Firm>\n{\n    long id;\n    String legalName;\n\n    demo_Firm_Impl()\n    {\n    }\n\n    public long getId()\n    {\n        return this.id;\n    }\n\n    public String getLegalName()\n    {\n        return this.legalName;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n\n    public List<IDefect> allConstraints()\n    {\n        return this.allConstraints(new GraphContext());\n    }\n\n    public _pure.app.demo.Firm withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public IChecked<_pure.app.demo.Firm> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public IChecked<_pure.app.demo.Firm> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public IChecked<_pure.app.demo.Firm> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public IChecked<_pure.app.demo.Firm> toChecked(Object source, boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.demo.Firm getValue() { return demo_Firm_Impl.this; }\n        };\n    }\n\n    public List<IDefect> allConstraints(GraphContext context)\n    {\n        List<IDefect> result = new ArrayList<IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n}"
      },
      {
        "name": "demo__Firms_Impl",
        "package": "_pure.plan.root.n3.n1.localGraph.n1",
        "source": "package _pure.plan.root.n3.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\n\nclass demo__Firms_Impl implements _pure.app.demo._Firms, IReferencedObject, Constrained<_pure.app.demo._Firms>\n{\n    _pure.app.demo.Firm _firm;\n\n    demo__Firms_Impl()\n    {\n    }\n\n    public _pure.app.demo.Firm get_firm()\n    {\n        return this._firm;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n\n    public List<IDefect> allConstraints()\n    {\n        return this.allConstraints(new GraphContext());\n    }\n\n    public _pure.app.demo._Firms withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public IChecked<_pure.app.demo._Firms> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public IChecked<_pure.app.demo._Firms> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public IChecked<_pure.app.demo._Firms> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public IChecked<_pure.app.demo._Firms> toChecked(Object source, boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.demo._Firms>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.demo._Firms getValue() { return demo__Firms_Impl.this; }\n        };\n    }\n\n    public List<IDefect> allConstraints(GraphContext context)\n    {\n        List<IDefect> result = new ArrayList<IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.get_firm() != null)\n            {\n                result.addAll(((Constrained<_pure.app.demo.Firm>) this.get_firm())\n                                                                      .allConstraints(context)\n                                                                      .stream()\n                                                                      .map((IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                              org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"_firm\")))\n                                                                      .filter((IDefect x) -> x != null)\n                                                                      .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n}"
      }
    ]
  },
  "rootExecutionNode": {
    "_type": "sequence",
    "authDependent": false,
    "executionNodes": [
      {
        "_type": "function-parameters-validation",
        "authDependent": false,
        "executionNodes": [],
        "functionParameters": [
          {
            "_type": "var",
            "class": "Integer",
            "multiplicity": {
              "lowerBound": 1,
              "upperBound": 1
            },
            "name": "id",
            "supportsStream": false
          }
        ],
        "resultType": {
          "_type": "dataType",
          "dataType": "Boolean"
        }
      },
      {
        "_type": "allocation",
        "authDependent": false,
        "executionNodes": [
          {
            "_type": "platform",
            "authDependent": false,
            "executionNodes": [],
            "implementation": {
              "_type": "java",
              "executionClassFullName": "_pure.plan.root.n2.n1.Execute",
              "executionMethodName": "execute"
            },
            "pure": {
              "_type": "func",
              "fControl": "plus_Integer_MANY__Integer_1_",
              "function": "plus",
              "parameters": [
                {
                  "_type": "collection",
                  "multiplicity": {
                    "lowerBound": 2,
                    "upperBound": 2
                  },
                  "values": [
                    {
                      "_type": "var",
                      "name": "id"
                    },
                    {
                      "_type": "integer",
                      "value": 1
                    }
                  ]
                }
              ]
            },
            "requiredVariableInputs": [
              {
                "multiplicity": {
                  "lowerBound": 1,
                  "upperBound": 1
                },
                "name": "id",
                "type": "Integer"
              }
            ],
            "resultType": {
              "_type": "dataType",
              "dataType": "Integer"
            }
          }
        ],
        "realizeInMemory": false,
        "resultSizeRange": {
          "lowerBound": 1,
          "upperBound": 1
        },
        "resultType": {
          "_type": "dataType",
          "dataType": "Integer"
        },
        "varName": "id2"
      },
      {
        "_type": "platform",
        "authDependent": false,
        "executionNodes": [
          {
            "_type": "storeMappingGlobalGraphFetchExecutionNode",
            "authDependent": false,
            "checked": false,
            "enableConstraints": true,
            "executionNodes": [],
            "graphFetchTree": {
              "_type": "rootGraphFetchTree",
              "class": "demo::Firm",
              "subTrees": [
                {
                  "_type": "propertyGraphFetchTree",
                  "parameters": [],
                  "property": "id",
                  "subTrees": []
                },
                {
                  "_type": "propertyGraphFetchTree",
                  "parameters": [],
                  "property": "legalName",
                  "subTrees": []
                }
              ]
            },
            "localGraphFetchExecutionNode": {
              "_type": "inMemoryRootGraphFetch",
              "authDependent": false,
              "batchSize": 1,
              "checked": false,
              "executionNodes": [
                {
                  "_type": "storeStreamReading",
                  "authDependent": false,
                  "checked": false,
                  "connection": {
                    "_type": "JsonModelConnection",
                    "class": "demo::_Firms",
                    "element": "ModelStore",
                    "url": "data:application/json,[{\"_firm\": {\"id\":1,\"legalName\":\"Finos\"}},{\"_firm\": {\"id\":2,\"legalName\":\"Legend\"}}]"
                  },
                  "enableConstraints": true,
                  "executionNodes": [],
                  "graphFetchTree": {
                    "_type": "rootGraphFetchTree",
                    "class": "demo::_Firms",
                    "subTrees": [
                      {
                        "_type": "propertyGraphFetchTree",
                        "parameters": [],
                        "property": "_firm",
                        "subTrees": [
                          {
                            "_type": "propertyGraphFetchTree",
                            "parameters": [],
                            "property": "id",
                            "subTrees": []
                          },
                          {
                            "_type": "propertyGraphFetchTree",
                            "parameters": [],
                            "property": "legalName",
                            "subTrees": []
                          }
                        ]
                      }
                    ]
                  },
                  "implementation": {
                    "_type": "java",
                    "executionClassFullName": "_pure.plan.root.n3.n1.localGraph.n1.Execute"
                  },
                  "resultType": {
                    "_type": "partialClass",
                    "class": "demo::_Firms",
                    "propertiesWithParameters": [
                      {
                        "property": "_firm"
                      }
                    ]
                  }
                }
              ],
              "graphFetchTree": {
                "_type": "rootGraphFetchTree",
                "class": "demo::Firm",
                "subTrees": [
                  {
                    "_type": "propertyGraphFetchTree",
                    "parameters": [],
                    "property": "id",
                    "subTrees": []
                  },
                  {
                    "_type": "propertyGraphFetchTree",
                    "parameters": [],
                    "property": "legalName",
                    "subTrees": []
                  }
                ]
              },
              "implementation": {
                "_type": "java",
                "executionClassFullName": "_pure.plan.root.n3.n1.localGraph.Execute"
              },
              "nodeIndex": 0,
              "resultType": {
                "_type": "partialClass",
                "class": "demo::Firm",
                "propertiesWithParameters": [
                  {
                    "property": "id"
                  },
                  {
                    "property": "legalName"
                  }
                ],
                "setImplementations": [
                  {
                    "class": "demo::Firm",
                    "id": "demo_Firm",
                    "mapping": "demo::M2MMapping",
                    "propertyMappings": [
                      {
                        "enumMapping": {},
                        "property": "id",
                        "type": "Integer"
                      },
                      {
                        "enumMapping": {},
                        "property": "legalName",
                        "type": "String"
                      },
                      {
                        "enumMapping": {},
                        "property": "isPublicEntity",
                        "type": "Boolean"
                      },
                      {
                        "enumMapping": {},
                        "property": "stockValue",
                        "type": "Decimal"
                      }
                    ]
                  }
                ]
              }
            },
            "localTreeIndices": [
              0,
              1,
              2
            ],
            "resultSizeRange": {
              "lowerBound": 0
            },
            "resultType": {
              "_type": "partialClass",
              "class": "demo::Firm",
              "propertiesWithParameters": [
                {
                  "property": "id"
                },
                {
                  "property": "legalName"
                }
              ],
              "setImplementations": [
                {
                  "class": "demo::Firm",
                  "id": "demo_Firm",
                  "mapping": "demo::M2MMapping",
                  "propertyMappings": [
                    {
                      "enumMapping": {},
                      "property": "id",
                      "type": "Integer"
                    },
                    {
                      "enumMapping": {},
                      "property": "legalName",
                      "type": "String"
                    },
                    {
                      "enumMapping": {},
                      "property": "isPublicEntity",
                      "type": "Boolean"
                    },
                    {
                      "enumMapping": {},
                      "property": "stockValue",
                      "type": "Decimal"
                    }
                  ]
                }
              ]
            },
            "store": "MODEL"
          }
        ],
        "implementation": {
          "_type": "java",
          "executionClassFullName": "_pure.plan.root.n3.Serialize"
        },
        "pure": {
          "_type": "func",
          "fControl": "serialize_T_MANY__RootGraphFetchTree_1__String_1_",
          "function": "serialize",
          "parameters": [
            {
              "_type": "collection",
              "multiplicity": {
                "lowerBound": 0
              },
              "values": []
            },
            {
              "_type": "classInstance",
              "type": "rootGraphFetchTree",
              "value": {
                "_type": "rootGraphFetchTree",
                "class": "demo::Firm",
                "subTrees": [
                  {
                    "_type": "propertyGraphFetchTree",
                    "parameters": [],
                    "property": "id",
                    "subTrees": []
                  },
                  {
                    "_type": "propertyGraphFetchTree",
                    "parameters": [],
                    "property": "legalName",
                    "subTrees": []
                  }
                ]
              }
            }
          ]
        },
        "resultType": {
          "_type": "dataType",
          "dataType": "String"
        }
      }
    ],
    "resultType": {
      "_type": "dataType",
      "dataType": "String"
    }
  },
  "serializer": {
    "name": "pure",
    "version": "vX_X_X"
  },
  "templateFunctions": []
}