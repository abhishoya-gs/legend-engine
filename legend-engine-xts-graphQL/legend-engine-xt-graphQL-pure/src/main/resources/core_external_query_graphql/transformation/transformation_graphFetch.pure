// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.





###Pure
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::external::query::graphQL::metamodel::sdl::value::*;
import meta::external::query::graphQL::metamodel::sdl::executable::*;
import meta::external::query::graphQL::transformation::queryToPure::*;
import meta::pure::graphFetch::*;

function meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure(query:Document[1], root: Class<Any>[1]) : RootGraphFetchTree<Any>[1]
{
  let types = $root->meta::external::query::graphQL::binding::fromPure::introspection::scanTypes([]);
  let fragments = $query.definitions->map(d|
    $d->match([
      
      f : FragmentDefinition[1]| pair($f.name, list($f.selectionSet->transformSelectionToPure($types->filter(c|$c.name == $f.typeCondition)->toOne()->cast(@Class<Any>))));,
      o : OperationDefinition[1]| pair('__Query', list($o.selectionSet->transformSelectionToPure($root)));
    ])    
  )->newMap();

  ^RootGraphFetchTree<Any>
  (
    class = $root,
    subTrees = $fragments->get('__Query')->toOne().values->buildGraphFetchFromIntermediateNodes($fragments)
  );
}


Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateNode
{
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode extends IntermediateNode
{
  children :  meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*];
  propertyFetch : PropertyGraphFetchTree[1];
}

Class <<access.private>> meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode extends IntermediateNode
{
  name : String[1];
}


function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::transformSelectionToPure(selection:Selection[*], root:Class<Any>[1]) : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*]
{
  $selection->map(s|$s->match(
    [
      field : Field[1] |let property = $root->meta::pure::functions::meta::allProperties()->filter(p|$p.name == $field.name);
                        assert(!$property->isEmpty(), |'Property "'+$field.name+'" can\'t be found in the type '+$root->elementToPath());


                         let params =  if($property->toOne()->instanceOf(QualifiedProperty) ,
                                                    | $property->cast(@QualifiedProperty<Any>).classifierGenericType.typeArguments.rawType->toOne()->cast(@FunctionType).parameters->tail(),
                                                    |  []
                                           );
                        ^meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode
                        (
                            propertyFetch = ^PropertyGraphFetchTree
                                          (
                                            property = $property->toOne(),
                                            parameters = $params),
                          children = if ($field.selectionSet->isEmpty(),|[],|$field.selectionSet->transformSelectionToPure($property->toOne()->functionReturnType().rawType->cast(@Class<Any>)->toOne()))
                        );,
      fragmentId : FragmentSpread[1] | ^meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode(name = $fragmentId.name);
    ]
  ));
}

function <<access.private>> meta::external::query::graphQL::transformation::queryToPure::buildGraphFetchFromIntermediateNodes(nodes : meta::external::query::graphQL::transformation::queryToPure::IntermediateNode[*], fragments : Map<String, List<meta::external::query::graphQL::transformation::queryToPure::IntermediateNode>>[1]) : PropertyGraphFetchTree[*]
{
  $nodes->map(n | $n->match(
      [
        p : meta::external::query::graphQL::transformation::queryToPure::IntermediatePropertyNode[1] | let val = $p.propertyFetch;
                                                                                           ^$val
                                                                                           (
                                                                                             subTrees = $p.children->buildGraphFetchFromIntermediateNodes($fragments)
                                                                                           );,
        f : meta::external::query::graphQL::transformation::queryToPure::IntermediateFragmentNode[1] | $fragments->get($f.name).values->buildGraphFetchFromIntermediateNodes($fragments)
      ]
    )
  )
}


###Pure
import meta::external::query::graphQL::metamodel::sdl::*;
import meta::pure::graphFetch::*;
import meta::external::query::graphQL::transformation::queryToPure::*;
function meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(
                                                                          cl:Class<Any>[1],
                                                                          mapping:meta::pure::mapping::Mapping[1],
                                                                          runtime:meta::pure::runtime::Runtime[1],
                                                                          query:meta::external::query::graphQL::metamodel::sdl::Document[1],
                                                                          extensions:meta::pure::extension::Extension[*]
                                                                      ):Pair<String, meta::pure::executionPlan::ExecutionPlan>[*]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);

  let res2 = meta::external::query::graphQL::transformation::queryToPure::findDirectivesOnRootQuery($query);
  $res->map(r|
              pair(
                $r.propertyName,
                meta::pure::executionPlan::executionPlan(
                  $r.functionDef,
                  $mapping,
                  $runtime,
                  $extensions
                )
              )
        )
        ->concatenate(
          meta::external::query::graphQL::transformation::queryToPure::getPlansForDirectives($graphFetch, $res, $mapping, $runtime, $query, $extensions)
        )
        ;
}

function meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPlansWithParameters(
                                                                          cl:Class<Any>[1],
                                                                          query:meta::external::query::graphQL::metamodel::sdl::Document[1],
                                                                          mapping:meta::pure::mapping::Mapping[1],
                                                                          runtime:meta::pure::runtime::Runtime[1],
                                                                          extensions:meta::pure::extension::Extension[*]
                                                                      ):meta::external::query::graphQL::transformation::queryToPure::NamedExecutionPlan[*]
{
  let pureWithParam =  meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);


    let res = $pureWithParam->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree(true);
  
  let res2 = meta::external::query::graphQL::transformation::queryToPure::findDirectivesOnRootQuery($query);
  
  $res->map(r|
              ^meta::external::query::graphQL::transformation::queryToPure::NamedExecutionPlan(
               name = $r.propertyName,
               plan =  meta::pure::executionPlan::executionPlan(
                  $r.functionDef,
                  $mapping,
                  $runtime,
                  $extensions
                )
              )
        )
        ->concatenate(
          meta::external::query::graphQL::transformation::queryToPure::getPlansForDirectives($pureWithParam, $res, $mapping, $runtime, $query, $extensions)->map(
            psp | ^meta::external::query::graphQL::transformation::queryToPure::NamedExecutionPlan(
              name = $psp.first,
              plan = $psp.second
            )
          )
        )
        ;
}

function meta::external::query::graphQL::transformation::queryToPure::getPlansForDirectives(
                                                                          tree: RootGraphFetchTree<Any>[1],
                                                                          res: meta::pure::graphFetch::domain::ExtractedDomainClassWithParameters[*],
                                                                          mapping:meta::pure::mapping::Mapping[1],
                                                                          runtime:meta::pure::runtime::Runtime[1],
                                                                          query:meta::external::query::graphQL::metamodel::sdl::Document[1],
                                                                          extensions:meta::pure::extension::Extension[*]
                                                                      ):Pair<String, meta::pure::executionPlan::ExecutionPlan>[*]
{
  let res2 = meta::external::query::graphQL::transformation::queryToPure::findDirectivesOnRootQuery($query);
  $res2->map(psd|
    $psd.second.values->filter(directive|$directive.name->in(['totalCount']))->map(
      d | pair(
            $psd.first + '@' + $d.name,
            meta::pure::executionPlan::executionPlan(
                functionDefForDirectives($d.name, $tree, $res, $query),
                $mapping,
                $runtime,
                $extensions
              )
      )
    )
  );
}

function meta::external::query::graphQL::transformation::queryToPure::findDirectivesOnRootQuery(query: meta::external::query::graphQL::metamodel::sdl::Document[1]): Pair<String, List<Directive>>[*]
{
  if($query->instanceOf(meta::external::query::graphQL::metamodel::sdl::ExecutableDocument),
  |$query->cast(@meta::external::query::graphQL::metamodel::sdl::ExecutableDocument).executableDefinitions->map(
         ed|$ed->cast(@meta::external::query::graphQL::metamodel::sdl::executable::OperationDefinition).selectionSet->map(
         s|$s->cast(@meta::external::query::graphQL::metamodel::sdl::executable::Field)->map(f|pair($f.name,^List<Directive>(values=$f.directives))))),
  |[]);
}

function meta::external::query::graphQL::transformation::queryToPure::functionDefForDirectives(directiveName: String[1], tree: RootGraphFetchTree<Any>[1], res: meta::pure::graphFetch::domain::ExtractedDomainClassWithParameters[*], query: meta::external::query::graphQL::metamodel::sdl::Document[1]): FunctionDefinition<Any>[1]
{
  if($directiveName == 'totalCount', 
    | meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective($tree, $res, $query), 
    | fail('directive not supported');
      []->cast(@FunctionDefinition<Any>)->toOne();
  );
}

function meta::external::query::graphQL::transformation::queryToPure::isALimitingFunction(func: Function<Any>[1]): Boolean[1]
{
  $func->in(
    [
      slice_T_MANY__Integer_1__Integer_1__T_MANY_,
      drop_T_MANY__Integer_1__T_MANY_,
      limit_T_MANY__Integer_1__T_MANY_,
      take_T_MANY__Integer_1__T_MANY_,
      paginated_T_MANY__Integer_1__Integer_1__T_MANY_,
      slice_TabularDataSet_1__Integer_1__Integer_1__TabularDataSet_1_,
      drop_TabularDataSet_1__Integer_1__TabularDataSet_1_,
      limit_TabularDataSet_1__Integer_1__TabularDataSet_1_,
      limit_TabularDataSet_1__Integer_$0_1$__TabularDataSet_1_,
      take_TabularDataSet_1__Integer_1__TabularDataSet_1_,
      paginated_TabularDataSet_1__Integer_1__Integer_1__TabularDataSet_1_
    ]
  )
}

function meta::external::query::graphQL::transformation::queryToPure::functionDefForTotalCountDirective(tree: RootGraphFetchTree<Any>[1], res: meta::pure::graphFetch::domain::ExtractedDomainClassWithParameters[*], query: meta::external::query::graphQL::metamodel::sdl::Document[1]): FunctionDefinition<Any>[1]
{
  let parameters = $tree.subTrees->cast(@meta::pure::graphFetch::PropertyGraphFetchTree)->evaluateAndDeactivate()->at(0).property.classifierGenericType.typeArguments.rawType->cast(@FunctionType).parameters->tail()->evaluateAndDeactivate();
  let expressionSequence = $res->at(0).functionDef.expressionSequence;
  let getAll = $expressionSequence->last()->toOne()->cast(@SimpleFunctionExpression);
  let funcWithoutGraphFetchSerialize = $expressionSequence->last()->toOne()
                                        ->cast(@SimpleFunctionExpression).parametersValues->at(0)
                                        ->cast(@SimpleFunctionExpression).parametersValues->at(0);
  let funcWithoutLimitingFunction = if(
    $funcWithoutGraphFetchSerialize->cast(@SimpleFunctionExpression).func->meta::external::query::graphQL::transformation::queryToPure::isALimitingFunction(),
    |$funcWithoutGraphFetchSerialize->cast(@SimpleFunctionExpression).parametersValues->at(0),
    |$funcWithoutGraphFetchSerialize
  );
  
  let expressionSequenceLengthLess1 = $expressionSequence->size() - 1;
  let func = ^LambdaFunction<{->Any[*]}>(expressionSequence=$expressionSequence->slice(0,$expressionSequenceLengthLess1)->concatenate(
                                                                                                                          ^$getAll(
                                                                                                                            func = count_Any_MANY__Integer_1_,
                                                                                                                            functionName = 'count',
                                                                                                                            genericType = ^GenericType(rawType=Integer),
                                                                                                                            resolvedTypeParameters = ^GenericType(rawType=Integer),
                                                                                                                            parametersValues = [
                                                                                                                              $funcWithoutLimitingFunction
                                                                                                                            ],
                                                                                                                            usageContext = []
                                                                                                                          ))->toOneMany());
  let lambdaWithParams = newLambdaFunction( 
                          ^FunctionType(returnMultiplicity = ZeroMany, returnType = ^GenericType(rawType = Any), parameters= $parameters)
                        );
  ^$func(classifierGenericType=$lambdaWithParams.classifierGenericType);
}


Class meta::external::query::graphQL::transformation::queryToPure::NamedExecutionPlan
{
  name : String[1];
  plan : meta::pure::executionPlan::ExecutionPlan[1];
}

Class meta::external::query::graphQL::transformation::queryToPure::GraphFetchResult
{
  graphFetchTree : meta::pure::graphFetch::RootGraphFetchTree<Any>[1];
  explodedDomain : Pair<String, FunctionDefinition<{->Any[*]}>>[*];
}

function meta::external::query::graphQL::transformation::queryToPure::getGraphFetchFromGraphQL(cl:Class<Any>[1], query:meta::external::query::graphQL::metamodel::sdl::Document[1]):GraphFetchResult[1]
{
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, $cl);
  let res = $graphFetch->meta::pure::graphFetch::domain::extractDomainTypeClassFromGraphFetchTree();
  ^GraphFetchResult
  (
    graphFetchTree = $graphFetch,
    explodedDomain = $res->map(r|pair($r.first, $r.second))
  );
}

